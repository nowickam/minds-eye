let uniforms = {};

export async function initShader() {
    let width = window.innerWidth;
    let height = window.innerHeight;

    let canvas = document.getElementById("c");


    const camera = new THREE.OrthographicCamera(
        -1, // left
        1, // right
        1, // top
        -1, // bottom
        -1, // near,
        1, // far
    );

    const scene = new THREE.Scene();
    const plane = new THREE.PlaneGeometry(2, 2);

    const vertexShader = /* glsl */ `
                varying vec3 vUv;
                void main() {
                    gl_Position = vec4(position, 1.0 );
                }
    `

    const fragmentShader = /* glsl */ `
                #define POINTS 6
                #define MAX_SIZE 5
                #define PI 3.1415

                uniform vec2 u_resolution;
                uniform vec2 u_seed[5];
                
                float random(vec2 co) {
                    return fract(sin((mod(dot(co, vec2(12.9898, 78.233)), 2.*PI))) * 43758.5453);
                }


                
                void main() {
                    // Normalized pixel coordinates (from 0 to 1)
                    vec2 uv = gl_FragCoord.xy / u_resolution;
                    // uv = 2.0 * uv - 1.0;
                    // uv = 0.5 * (uv + 1.);
                    vec3 color = vec3(.5);


                    for(int j=0; j<int(u_resolution.y); j++) {
                        if(float(j)/u_resolution.y < uv.y && uv.y < float(j+1)/u_resolution.y) {
                        vec2 seed = u_seed[j];
                        // Seed for the position noise        
                        vec2 seedX = vec2(seed.x);
                        vec2 seedY = vec2(seed.y);
                        // vec2 seed = vec2(2.);
                        // vec2 seedY = vec2(5.);
                                
                        // Centroids
                        vec2 points[POINTS];
                        for (int i = 0; i < POINTS; i++) {
                            points[i] = vec2((random(seedX))*1.2-0.1, (random(seedY))*1.2-0.1);
                            seedX += vec2(.4);
                            seedY += vec2(.3);
                        }

                        
                        for (int i = 0; i < POINTS; i++) {
                            if(float(i)/u_resolution.x <= uv.x && uv.x < float(i+1)/u_resolution.x) {
                                color = vec3(points[i].x, points[i].y, 0.);
                            }
                        }
                        }
                    }
                    
                    
                    gl_FragColor = vec4(color, 1.0);
                    
                }
                `;


    let time = 0;
    let renderer, texture;

    function render(time) {
        renderer.render(scene, camera);
    }

    let seeds = [
        [[0.32833285885863006, 0.3980765307787806]],
        [[0.6560636973008513, 0.6795940012671053]],
        [[0.4603170494083315, 0.1462087614927441]],
        [[0.7136805006302893, 0.889012842439115]],
        [[0.4455257677473128, 0.8643815747927874], [0.8935900400392711, 0.7698066832963377], [0.6723987879231572, 0.7496828695293516]],
        [[0.6504754186607897, 0.3105948055163026]],
        [[0.9206518873106688, 0.2971764684189111]],
        [[0.6367945852689445, 0.9686689290683717]],
        [[0.20646945713087916, 0.046951690223068]],
        [[0.7459108619950712, 0.2499065848533064]],

        [[0.6102684233337641, 0.2223469358868897]],
        [[0.03959637600928545, 0.6545476319734007]],
        [[0.7297876577358693, 0.770167127950117]],
        [[0.8053254645783454, 0.3387450883165002]],
        [[0.9467454061377794, 0.46340903523378074]],
        [[0.15432445984333754, 0.5587997930124402]],
        [[0.13780235615558922, 0.5260033940430731], [0.929628181271255, 0.18819714803248644], [0.8732511887792498, 0.08234454784542322], [0.9221269642002881, 0.7856447824742645]],
        [[0.4080328890122473, 0.8444403710309416]],
        [[0.09863330004736781, 0.06985626136884093]],
        [[0.23168507358059287, 0.915900404099375], [0.6567997243255377, 0.9400627431459725], [0.4453931571915746, 0.7728357678279281], [0.9910944551229477, 0.06321941502392292]],

        [[0.3905261140316725, 0.9255560406018049], [0.09156488231383264, 0.7508494099602103], [0.45258949673734605, 0.36822941852733493]],
        [[0.38095642114058137, 0.7180565698072314], [0.05570291820913553, 0.9796031159348786], [0.5941416684072465, 0.03396701882593334], [0.7043316345661879, 0.4128245492465794]],
        [[0.15793349430896342, 0.5850203726440668], [0.8508140619378537, 0.6796099622733891]],
        [[0.8728919099085033, 0.8350159963592887]],
        [[0.5830538056325167, 0.5685245105996728], [0.29165214439854026, 0.6846181869041175], [0.23551287618465722, 0.135543443961069]],
        [[0.25018332130275667, 0.48613209929317236], [0.32339573884382844, 0.4929889449849725], [0.06736665801145136, 0.5977626862004399]],
        [[0.26043068221770227, 0.6401022612117231]],
        [[0.6093976201955229, 0.999974072445184], [0.33447549119591713, 0.07704461249522865]],
        [[0.905816690530628, 0.034705331549048424]],
        [[0.8955499497242272, 0.4722629035823047]],

        [[0.027022669790312648, 0.14500897307880223]],
        [[0.7128256079740822, 0.8320034267380834], [0.9667332649696618, 0.7866610293276608], [0.08441861858591437, 0.7587458465714008]],
        [[0.9309994191862643, 0.12647131085395813], [0.4701669348869473, 0.28679443639703095]],
        [[0.13007081346586347, 0.11585103115066886], [0.12131857452914119, 0.15753548918291926], [0.8258043632376939, 0.28820256725884974]],
        [[0.8286232121754438, 0.6273797696921974], [0.7451640169601887, 0.8350478827487677]],
        [[0.8708352393005043, 0.9345545871183276]],
        [[0.31596386968158185, 0.5205329649616033]],
        [[0.9295292815659195, 0.9238962195813656]],
        [[0.7321073201019317, 0.08230220316909254]],
        [[0.04722339427098632, 0.3406276849564165], [0.5478236514609307, 0.12379633099772036]],

        [[0.9045468477997929, 0.24105747719295323]],
        [[0.7054178584367037, 0.09525544592179358], [0.4449798830319196, 0.8404604585375637], [0.8266768222674727, 0.41955716349184513], [0.9890434294939041, 0.8120847227983177]],
        [[0.5332196473609656, 0.8659843979403377], [0.17744260211475194, 0.7548813058529049]],
        [[0.04235218116082251, 0.4241534974426031], [0.9718763888813555, 0.8420425252988935]],
        [[0.7600342824589461, 0.02867449843324721], [0.8694606306962669, 0.2817639294080436], [0.14120573294349015, 0.9140734525863081]],
        [[0.27475714730098844, 0.17283937451429665], [0.7673331890255213, 0.29105078242719173], [0.20015009259805083, 0.016761314123868942]],
        [[0.026309300446882844, 0.13186983577907085], [0.9182322411797941, 0.31569141964428127]],
        [[0.4060362621676177, 0.5010116829071194], [0.24210801371373236, 0.43521934701129794]],
        [[0.2632124174851924, 0.7914227228611708], [0.8929720823653042, 0.35033005732111633], [0.7200877321884036, 0.47850534319877625], [0.3145054872147739, 0.5472655447665602]],
        [[0.812701468123123, 0.8418590459041297], [0.14156049233861268, 0.9860402944032103], [0.4660054880660027, 0.22782027348876], [0.007607022067531943, 0.09000999270938337], [0.1178663510363549, 0.4335374783258885]]

    ]

    for (let i = 0; i < seeds.length; i++) {
        while (scene.children.length > 0) {
            scene.remove(scene.children[0]);
        }

        let seed = seeds[i];
        console.log([i])

        canvas.width = 6;
        canvas.height = seed.length;

        renderer = new THREE.WebGLRenderer({ antialias: true, canvas: canvas, alpha: true, precision: "highp" });
        renderer.setClearColor(0x000000, 0);

        renderer.setSize(canvas.width, canvas.height)

        camera.aspect = canvas.width / canvas.height;

        let seedsShader = seeds[i].map((seed) => new THREE.Vector2(seed[0], seed[1]));
        console.log(seedsShader)
        for (let j = 0; j < 5; j++) {
            seedsShader.push(new THREE.Vector2(-1, -1));
        }
        console.log(seedsShader)

        uniforms = {
            u_resolution: { value: new THREE.Vector2(6, seed.length) },
            u_seed: { value: seedsShader },
        };

        const material = new THREE.ShaderMaterial({
            vertexShader: vertexShader,
            fragmentShader: fragmentShader,
            uniforms: uniforms,
            transparent: true,
        });
        scene.add(new THREE.Mesh(plane, material));


        renderer.render(scene, camera);
        ReImg.fromCanvas(canvas).downloadPng()
        await new Promise(resolve => setTimeout(resolve, 1000))


    }

}

initShader();